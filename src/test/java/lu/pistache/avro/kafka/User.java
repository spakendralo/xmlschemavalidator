/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package lu.pistache.avro.kafka;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"lu.pistache.avro\",\"fields\":[{\"name\":\"Id\",\"type\":\"long\"},{\"name\":\"Name\",\"type\":\"string\"},{\"name\":\"Surname\",\"type\":\"string\",\"default\":\"Doe\"},{\"name\":\"Status\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"StatusEnum\",\"symbols\":[\"ALIVE\",\"KICKING\",\"DEAD\"]}],\"default\":null},{\"name\":\"Address\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"addressId\",\"type\":\"int\"},{\"name\":\"Line1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"Line2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"Line3\",\"type\":[\"null\",\"string\"],\"default\":null}]}],\"default\":null},{\"name\":\"AlternativeAddress\",\"type\":[\"null\",\"Address\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long Id;
  @Deprecated public CharSequence Name;
  @Deprecated public CharSequence Surname;
  @Deprecated public StatusEnum Status;
  @Deprecated public lu.pistache.avro.kafka.Address Address;
  @Deprecated public lu.pistache.avro.kafka.Address AlternativeAddress;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public User() {}

  /**
   * All-args constructor.
   */
  public User(Long Id, CharSequence Name, CharSequence Surname, StatusEnum Status, lu.pistache.avro.kafka.Address Address, lu.pistache.avro.kafka.Address AlternativeAddress) {
    this.Id = Id;
    this.Name = Name;
    this.Surname = Surname;
    this.Status = Status;
    this.Address = Address;
    this.AlternativeAddress = AlternativeAddress;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return Id;
    case 1: return Name;
    case 2: return Surname;
    case 3: return Status;
    case 4: return Address;
    case 5: return AlternativeAddress;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: Id = (Long)value$; break;
    case 1: Name = (CharSequence)value$; break;
    case 2: Surname = (CharSequence)value$; break;
    case 3: Status = (StatusEnum)value$; break;
    case 4: Address = (lu.pistache.avro.kafka.Address)value$; break;
    case 5: AlternativeAddress = (lu.pistache.avro.kafka.Address)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Id' field.
   */
  public Long getId() {
    return Id;
  }

  /**
   * Sets the value of the 'Id' field.
   * @param value the value to set.
   */
  public void setId(Long value) {
    this.Id = value;
  }

  /**
   * Gets the value of the 'Name' field.
   */
  public CharSequence getName() {
    return Name;
  }

  /**
   * Sets the value of the 'Name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.Name = value;
  }

  /**
   * Gets the value of the 'Surname' field.
   */
  public CharSequence getSurname() {
    return Surname;
  }

  /**
   * Sets the value of the 'Surname' field.
   * @param value the value to set.
   */
  public void setSurname(CharSequence value) {
    this.Surname = value;
  }

  /**
   * Gets the value of the 'Status' field.
   */
  public StatusEnum getStatus() {
    return Status;
  }

  /**
   * Sets the value of the 'Status' field.
   * @param value the value to set.
   */
  public void setStatus(StatusEnum value) {
    this.Status = value;
  }

  /**
   * Gets the value of the 'Address' field.
   */
  public lu.pistache.avro.kafka.Address getAddress() {
    return Address;
  }

  /**
   * Sets the value of the 'Address' field.
   * @param value the value to set.
   */
  public void setAddress(lu.pistache.avro.kafka.Address value) {
    this.Address = value;
  }

  /**
   * Gets the value of the 'AlternativeAddress' field.
   */
  public lu.pistache.avro.kafka.Address getAlternativeAddress() {
    return AlternativeAddress;
  }

  /**
   * Sets the value of the 'AlternativeAddress' field.
   * @param value the value to set.
   */
  public void setAlternativeAddress(lu.pistache.avro.kafka.Address value) {
    this.AlternativeAddress = value;
  }

  /** Creates a new User RecordBuilder */
  public static User.Builder newBuilder() {
    return new User.Builder();
  }

  /** Creates a new User RecordBuilder by copying an existing Builder */
  public static User.Builder newBuilder(User.Builder other) {
    return new User.Builder(other);
  }

  /** Creates a new User RecordBuilder by copying an existing User instance */
  public static User.Builder newBuilder(User other) {
    return new User.Builder(other);
  }

  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private long Id;
    private CharSequence Name;
    private CharSequence Surname;
    private StatusEnum Status;
    private lu.pistache.avro.kafka.Address Address;
    private lu.pistache.avro.kafka.Address AlternativeAddress;

    /** Creates a new Builder */
    private Builder() {
      super(User.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Surname)) {
        this.Surname = data().deepCopy(fields()[2].schema(), other.Surname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Status)) {
        this.Status = data().deepCopy(fields()[3].schema(), other.Status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Address)) {
        this.Address = data().deepCopy(fields()[4].schema(), other.Address);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.AlternativeAddress)) {
        this.AlternativeAddress = data().deepCopy(fields()[5].schema(), other.AlternativeAddress);
        fieldSetFlags()[5] = true;
      }
    }

    /** Creates a Builder by copying an existing User instance */
    private Builder(User other) {
            super(User.SCHEMA$);
      if (isValidValue(fields()[0], other.Id)) {
        this.Id = data().deepCopy(fields()[0].schema(), other.Id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Name)) {
        this.Name = data().deepCopy(fields()[1].schema(), other.Name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Surname)) {
        this.Surname = data().deepCopy(fields()[2].schema(), other.Surname);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Status)) {
        this.Status = data().deepCopy(fields()[3].schema(), other.Status);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.Address)) {
        this.Address = data().deepCopy(fields()[4].schema(), other.Address);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.AlternativeAddress)) {
        this.AlternativeAddress = data().deepCopy(fields()[5].schema(), other.AlternativeAddress);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'Id' field */
    public Long getId() {
      return Id;
    }

    /** Sets the value of the 'Id' field */
    public User.Builder setId(long value) {
      validate(fields()[0], value);
      this.Id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'Id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'Id' field */
    public User.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'Name' field */
    public CharSequence getName() {
      return Name;
    }

    /** Sets the value of the 'Name' field */
    public User.Builder setName(CharSequence value) {
      validate(fields()[1], value);
      this.Name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'Name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'Name' field */
    public User.Builder clearName() {
      Name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'Surname' field */
    public CharSequence getSurname() {
      return Surname;
    }

    /** Sets the value of the 'Surname' field */
    public User.Builder setSurname(CharSequence value) {
      validate(fields()[2], value);
      this.Surname = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'Surname' field has been set */
    public boolean hasSurname() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'Surname' field */
    public User.Builder clearSurname() {
      Surname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'Status' field */
    public StatusEnum getStatus() {
      return Status;
    }

    /** Sets the value of the 'Status' field */
    public User.Builder setStatus(StatusEnum value) {
      validate(fields()[3], value);
      this.Status = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'Status' field has been set */
    public boolean hasStatus() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'Status' field */
    public User.Builder clearStatus() {
      Status = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'Address' field */
    public lu.pistache.avro.kafka.Address getAddress() {
      return Address;
    }

    /** Sets the value of the 'Address' field */
    public User.Builder setAddress(lu.pistache.avro.kafka.Address value) {
      validate(fields()[4], value);
      this.Address = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /** Checks whether the 'Address' field has been set */
    public boolean hasAddress() {
      return fieldSetFlags()[4];
    }

    /** Clears the value of the 'Address' field */
    public User.Builder clearAddress() {
      Address = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'AlternativeAddress' field */
    public lu.pistache.avro.kafka.Address getAlternativeAddress() {
      return AlternativeAddress;
    }

    /** Sets the value of the 'AlternativeAddress' field */
    public User.Builder setAlternativeAddress(lu.pistache.avro.kafka.Address value) {
      validate(fields()[5], value);
      this.AlternativeAddress = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /** Checks whether the 'AlternativeAddress' field has been set */
    public boolean hasAlternativeAddress() {
      return fieldSetFlags()[5];
    }

    /** Clears the value of the 'AlternativeAddress' field */
    public User.Builder clearAlternativeAddress() {
      AlternativeAddress = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.Id = fieldSetFlags()[0] ? this.Id : (Long) defaultValue(fields()[0]);
        record.Name = fieldSetFlags()[1] ? this.Name : (CharSequence) defaultValue(fields()[1]);
        record.Surname = fieldSetFlags()[2] ? this.Surname : (CharSequence) defaultValue(fields()[2]);
        record.Status = fieldSetFlags()[3] ? this.Status : (StatusEnum) defaultValue(fields()[3]);
        record.Address = fieldSetFlags()[4] ? this.Address : (lu.pistache.avro.kafka.Address) defaultValue(fields()[4]);
        record.AlternativeAddress = fieldSetFlags()[5] ? this.AlternativeAddress : (lu.pistache.avro.kafka.Address) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
