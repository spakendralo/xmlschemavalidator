/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package lu.pistache.avro.kafka;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Address extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"lu.pistache.avro\",\"fields\":[{\"name\":\"addressId\",\"type\":\"int\"},{\"name\":\"Line1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"Line2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"Line3\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int addressId;
  @Deprecated public CharSequence Line1;
  @Deprecated public CharSequence Line2;
  @Deprecated public CharSequence Line3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Address() {}

  /**
   * All-args constructor.
   */
  public Address(Integer addressId, CharSequence Line1, CharSequence Line2, CharSequence Line3) {
    this.addressId = addressId;
    this.Line1 = Line1;
    this.Line2 = Line2;
    this.Line3 = Line3;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return addressId;
    case 1: return Line1;
    case 2: return Line2;
    case 3: return Line3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: addressId = (Integer)value$; break;
    case 1: Line1 = (CharSequence)value$; break;
    case 2: Line2 = (CharSequence)value$; break;
    case 3: Line3 = (CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'addressId' field.
   */
  public Integer getAddressId() {
    return addressId;
  }

  /**
   * Sets the value of the 'addressId' field.
   * @param value the value to set.
   */
  public void setAddressId(Integer value) {
    this.addressId = value;
  }

  /**
   * Gets the value of the 'Line1' field.
   */
  public CharSequence getLine1() {
    return Line1;
  }

  /**
   * Sets the value of the 'Line1' field.
   * @param value the value to set.
   */
  public void setLine1(CharSequence value) {
    this.Line1 = value;
  }

  /**
   * Gets the value of the 'Line2' field.
   */
  public CharSequence getLine2() {
    return Line2;
  }

  /**
   * Sets the value of the 'Line2' field.
   * @param value the value to set.
   */
  public void setLine2(CharSequence value) {
    this.Line2 = value;
  }

  /**
   * Gets the value of the 'Line3' field.
   */
  public CharSequence getLine3() {
    return Line3;
  }

  /**
   * Sets the value of the 'Line3' field.
   * @param value the value to set.
   */
  public void setLine3(CharSequence value) {
    this.Line3 = value;
  }

  /** Creates a new Address RecordBuilder */
  public static Address.Builder newBuilder() {
    return new Address.Builder();
  }

  /** Creates a new Address RecordBuilder by copying an existing Builder */
  public static Address.Builder newBuilder(Address.Builder other) {
    return new Address.Builder(other);
  }

  /** Creates a new Address RecordBuilder by copying an existing Address instance */
  public static Address.Builder newBuilder(Address other) {
    return new Address.Builder(other);
  }

  /**
   * RecordBuilder for Address instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Address>
    implements org.apache.avro.data.RecordBuilder<Address> {

    private int addressId;
    private CharSequence Line1;
    private CharSequence Line2;
    private CharSequence Line3;

    /** Creates a new Builder */
    private Builder() {
      super(Address.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(Address.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.addressId)) {
        this.addressId = data().deepCopy(fields()[0].schema(), other.addressId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Line1)) {
        this.Line1 = data().deepCopy(fields()[1].schema(), other.Line1);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Line2)) {
        this.Line2 = data().deepCopy(fields()[2].schema(), other.Line2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Line3)) {
        this.Line3 = data().deepCopy(fields()[3].schema(), other.Line3);
        fieldSetFlags()[3] = true;
      }
    }

    /** Creates a Builder by copying an existing Address instance */
    private Builder(Address other) {
            super(Address.SCHEMA$);
      if (isValidValue(fields()[0], other.addressId)) {
        this.addressId = data().deepCopy(fields()[0].schema(), other.addressId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Line1)) {
        this.Line1 = data().deepCopy(fields()[1].schema(), other.Line1);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.Line2)) {
        this.Line2 = data().deepCopy(fields()[2].schema(), other.Line2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Line3)) {
        this.Line3 = data().deepCopy(fields()[3].schema(), other.Line3);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'addressId' field */
    public Integer getAddressId() {
      return addressId;
    }

    /** Sets the value of the 'addressId' field */
    public Address.Builder setAddressId(int value) {
      validate(fields()[0], value);
      this.addressId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'addressId' field has been set */
    public boolean hasAddressId() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'addressId' field */
    public Address.Builder clearAddressId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'Line1' field */
    public CharSequence getLine1() {
      return Line1;
    }

    /** Sets the value of the 'Line1' field */
    public Address.Builder setLine1(CharSequence value) {
      validate(fields()[1], value);
      this.Line1 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'Line1' field has been set */
    public boolean hasLine1() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'Line1' field */
    public Address.Builder clearLine1() {
      Line1 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'Line2' field */
    public CharSequence getLine2() {
      return Line2;
    }

    /** Sets the value of the 'Line2' field */
    public Address.Builder setLine2(CharSequence value) {
      validate(fields()[2], value);
      this.Line2 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /** Checks whether the 'Line2' field has been set */
    public boolean hasLine2() {
      return fieldSetFlags()[2];
    }

    /** Clears the value of the 'Line2' field */
    public Address.Builder clearLine2() {
      Line2 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'Line3' field */
    public CharSequence getLine3() {
      return Line3;
    }

    /** Sets the value of the 'Line3' field */
    public Address.Builder setLine3(CharSequence value) {
      validate(fields()[3], value);
      this.Line3 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /** Checks whether the 'Line3' field has been set */
    public boolean hasLine3() {
      return fieldSetFlags()[3];
    }

    /** Clears the value of the 'Line3' field */
    public Address.Builder clearLine3() {
      Line3 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Address build() {
      try {
        Address record = new Address();
        record.addressId = fieldSetFlags()[0] ? this.addressId : (Integer) defaultValue(fields()[0]);
        record.Line1 = fieldSetFlags()[1] ? this.Line1 : (CharSequence) defaultValue(fields()[1]);
        record.Line2 = fieldSetFlags()[2] ? this.Line2 : (CharSequence) defaultValue(fields()[2]);
        record.Line3 = fieldSetFlags()[3] ? this.Line3 : (CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
